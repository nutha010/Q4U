AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  DomainName:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone e.g. jevsejev.io
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    ConstraintDescription: must be a valid DNS zone name.
  ZoneId:
    Type: String
    Description: ID of the hosted domain
  FullDomainName:
    Type: String
    Description: The full domain name e.g. www.jevsejev.io
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    ConstraintDescription: must be a valid DNS zone name.
  ApiDomainName:
    Type: String
    Description: The domain name of the API domain
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    ConstraintDescription: must be a valid DNS zone name.
Resources:
  # Backend functions
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowOrigin: "'*'"  # TODO: This needs to be set to something sensible!
      Domain:
        CertificateArn: !Ref ApiCertificate
        DomainName: !Ref ApiDomainName
        Route53:
          HostedZoneId: !Ref ZoneId
      StageName: Dev
  ApiCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref ApiDomainName
      ValidationMethod: DNS

  ExampleApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: python3.8
      Handler: example.main_handler
      CodeUri: example_function
      Description: An example API function to use as a base for additional functions
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /example
            RestApiId: !Ref ApiGateway
Outputs:
  ApiGateway:
    Value: !Ref ApiGateway